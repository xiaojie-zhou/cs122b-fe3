{"ast":null,"code":"import Config from \"backend/config.json\";\nimport Axios from \"axios\";\nexport async function search(searchRequest, accessToken) {\n  const searchParams = {\n    title: searchRequest.title,\n    genre: searchRequest.genre,\n    year: searchRequest.year,\n    director: searchRequest.director,\n    limit: searchRequest.limit,\n    page: searchRequest.page,\n    orderBy: searchRequest.orderBy,\n    direction: searchRequest.direction\n  };\n\n  for (const key of Object.keys(searchParams)) {\n    if (searchParams[key] === \"\") {\n      delete searchParams[key];\n    }\n  }\n\n  const options = {\n    method: \"GET\",\n    baseURL: Config.movieUrl,\n    url: Config.movies.search,\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    },\n    params: searchParams\n  };\n  return Axios.request(options);\n}\nexport async function searchByPersonId(searchRequest, accessToken) {\n  const searchParams = {\n    personId: searchRequest.personId,\n    limit: searchRequest.limit,\n    page: searchRequest.page,\n    orderBy: searchRequest.orderBy,\n    direction: searchRequest.direction\n  };\n  const options = {\n    method: \"GET\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.movieUrl,\n    // Base URL (localhost:8081 for example)\n    url: Config.movies.searchByPersonId,\n    // Path of URL (\"/login\")\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    },\n    params: searchParams // Data to send in Body (The RequestBody to send)\n\n  };\n  return Axios.request(options);\n}\nexport async function searchByMovieId(movieId, accessToken) {\n  const options = {\n    method: \"GET\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.movieUrl,\n    // Base URL (localhost:8081 for example)\n    url: Config.movies.searchByMovieId + movieId,\n    // Path of URL (\"/login\")\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    }\n  };\n  return Axios.request(options);\n}\nexport async function personSearch(searchRequest, accessToken) {\n  const searchParams = {\n    name: searchRequest.name,\n    birthday: searchRequest.birthday,\n    movieTitle: searchRequest.movieTitle,\n    limit: searchRequest.limit,\n    page: searchRequest.page,\n    orderBy: searchRequest.orderBy,\n    direction: searchRequest.direction\n  };\n  const options = {\n    method: \"GET\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.movieUrl,\n    // Base URL (localhost:8081 for example)\n    url: Config.movies.personSearch,\n    // Path of URL (\"/login\")\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    },\n    params: searchParams // Data to send in Body (The RequestBody to send)\n\n  };\n  return Axios.request(options);\n}\nexport async function personIdSearch(searchRequest, accessToken) {\n  const searchParams = {\n    personId: searchRequest.personId,\n    limit: searchRequest.limit,\n    page: searchRequest.page,\n    orderBy: searchRequest.orderBy,\n    direction: searchRequest.direction\n  };\n  const options = {\n    method: \"GET\",\n    // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n    baseURL: Config.movieUrl,\n    // Base URL (localhost:8081 for example)\n    url: Config.movies.personIdSearch,\n    // Path of URL (\"/login\")\n    headers: {\n      Authorization: \"Bearer \" + accessToken\n    },\n    params: searchParams // Data to send in Body (The RequestBody to send)\n\n  };\n  return Axios.request(options);\n}","map":{"version":3,"sources":["/Users/XiaojieZhou/CS122B/cs122b-fe3/src/backend/movies.js"],"names":["Config","Axios","search","searchRequest","accessToken","searchParams","title","genre","year","director","limit","page","orderBy","direction","key","Object","keys","options","method","baseURL","movieUrl","url","movies","headers","Authorization","params","request","searchByPersonId","personId","searchByMovieId","movieId","personSearch","name","birthday","movieTitle","personIdSearch"],"mappings":"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","sourcesContent":["import Config from \"backend/config.json\";\nimport Axios from \"axios\";\n\n\nexport async function search(searchRequest, accessToken) {\n    const searchParams = {\n        title: searchRequest.title,\n        genre: searchRequest.genre,\n        year: searchRequest.year,\n        director: searchRequest.director,\n        limit:searchRequest.limit,\n        page:searchRequest.page,\n        orderBy:searchRequest.orderBy,\n        direction:searchRequest.direction\n    };\n\n    for (const key of Object.keys(searchParams)) {\n        if (searchParams[key] === \"\") {\n            delete searchParams[key];\n        }\n    }\n\n    const options = {\n        method: \"GET\",\n        baseURL: Config.movieUrl,\n        url: Config.movies.search,\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        },\n        params: searchParams\n    }\n\n    return Axios.request(options);\n}\n\nexport async function searchByPersonId(searchRequest, accessToken) {\n    const searchParams = {\n        personId: searchRequest.personId,\n        limit:searchRequest.limit,\n        page:searchRequest.page,\n        orderBy:searchRequest.orderBy,\n        direction:searchRequest.direction\n    };\n\n    const options = {\n        method: \"GET\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.movieUrl, // Base URL (localhost:8081 for example)\n        url: Config.movies.searchByPersonId, // Path of URL (\"/login\")\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        },\n        params: searchParams // Data to send in Body (The RequestBody to send)\n    }\n\n    return Axios.request(options);\n}\n\nexport async function searchByMovieId(movieId, accessToken) {\n\n\n    const options = {\n        method: \"GET\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.movieUrl, // Base URL (localhost:8081 for example)\n        url: Config.movies.searchByMovieId+movieId, // Path of URL (\"/login\")\n        headers: {Authorization: \"Bearer \" + accessToken},\n    }\n\n    return Axios.request(options);\n}\n\nexport async function personSearch(searchRequest, accessToken) {\n    const searchParams = {\n        name: searchRequest.name,\n        birthday: searchRequest.birthday,\n        movieTitle: searchRequest.movieTitle,\n        limit:searchRequest.limit,\n        page:searchRequest.page,\n        orderBy:searchRequest.orderBy,\n        direction:searchRequest.direction\n    };\n\n    const options = {\n        method: \"GET\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.movieUrl, // Base URL (localhost:8081 for example)\n        url: Config.movies.personSearch, // Path of URL (\"/login\")\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        },\n        params: searchParams // Data to send in Body (The RequestBody to send)\n    }\n\n    return Axios.request(options);\n}\n\nexport async function personIdSearch(searchRequest, accessToken) {\n    const searchParams = {\n        personId:searchRequest.personId,\n        limit:searchRequest.limit,\n        page:searchRequest.page,\n        orderBy:searchRequest.orderBy,\n        direction:searchRequest.direction\n    };\n\n    const options = {\n        method: \"GET\", // Method type (\"POST\", \"GET\", \"DELETE\", ect)\n        baseURL: Config.movieUrl, // Base URL (localhost:8081 for example)\n        url: Config.movies.personIdSearch, // Path of URL (\"/login\")\n        headers: {\n            Authorization: \"Bearer \" + accessToken\n        },\n        params: searchParams // Data to send in Body (The RequestBody to send)\n    }\n\n    return Axios.request(options);\n}\n\n"]},"metadata":{},"sourceType":"module"}