{"ast":null,"code":"var _jsxFileName = \"/Users/XiaojieZhou/CS122B/cs122b-fe3/src/app/App.jsx\";\nimport React from \"react\";\nimport Content from 'app/Content';\nimport NavBar from 'app/NavBar';\nimport { UserProvider } from \"hook/User\";\nimport styled from \"styled-components\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n/**\n * Here is the root of our application.\n * <br>\n * The function below is called a \"React Hook\" and we use these functions to\n * create a \"React Component\".\n * <br>\n * You'll notice that this function returns other \"React Component\"s. All React\n * Components will either return More \"React Component's\" or JSX (More on this\n * later but think of this as html)\n * <br>\n * The rule for returning these Components is that you can return\n * as many Components as you want, but they must be \"Wrapped\" into a single\n * Component. As we can see below, all the components are wrapped into the\n * <UserProvider> Component.\n * <li><UserProvider> - A Component allows us to do some data storage we will\n * talk about later\n * <li><StyledDiv> - A html div (think of these as boxes that <i>divide</i> the\n * page). This particular div is a \"styled\" div, as in a div that has some css\n * inside it. You can see the style we apply to it above in the\n * <b>StyledDiv</b> variable\n * <li><NavBar> - The top Navigation bar with links to all our pages\n * <li><Content> - This Is a component that can have its contents be decided by\n * the \"url\" of the page\n *\n */\n\n_c = StyledDiv;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(UserProvider, {\n    children: /*#__PURE__*/_jsxDEV(StyledDiv, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledDiv\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/XiaojieZhou/CS122B/cs122b-fe3/src/app/App.jsx"],"names":["React","Content","NavBar","UserProvider","styled","StyledDiv","div","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,sCAAP;;AAEA,MAAMC,SAAS,GAAGD,MAAM,CAACE,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KAhCMD,S;;AAiCN,MAAME,GAAG,GAAG,MAAM;AACd,sBACI,QAAC,YAAD;AAAA,2BACI,QAAC,SAAD;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;MAAMA,G;AAWN,eAAeA,GAAf","sourcesContent":["import React from \"react\";\nimport Content from 'app/Content';\nimport NavBar from 'app/NavBar';\nimport {UserProvider} from \"hook/User\";\nimport styled from \"styled-components\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`\n\n/**\n * Here is the root of our application.\n * <br>\n * The function below is called a \"React Hook\" and we use these functions to\n * create a \"React Component\".\n * <br>\n * You'll notice that this function returns other \"React Component\"s. All React\n * Components will either return More \"React Component's\" or JSX (More on this\n * later but think of this as html)\n * <br>\n * The rule for returning these Components is that you can return\n * as many Components as you want, but they must be \"Wrapped\" into a single\n * Component. As we can see below, all the components are wrapped into the\n * <UserProvider> Component.\n * <li><UserProvider> - A Component allows us to do some data storage we will\n * talk about later\n * <li><StyledDiv> - A html div (think of these as boxes that <i>divide</i> the\n * page). This particular div is a \"styled\" div, as in a div that has some css\n * inside it. You can see the style we apply to it above in the\n * <b>StyledDiv</b> variable\n * <li><NavBar> - The top Navigation bar with links to all our pages\n * <li><Content> - This Is a component that can have its contents be decided by\n * the \"url\" of the page\n *\n */\nconst App = () => {\n    return (\n        <UserProvider>\n            <StyledDiv>\n                <NavBar/>\n                <Content/>\n            </StyledDiv>\n        </UserProvider>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}